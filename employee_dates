#!/usr/bin/env python3

import csv
import datetime
import requests

FILE_URL = "https://storage.googleapis.com/gwg-content/gic215/employees-with-date.csv"

def get_start_date():
    """Interactively get the start date to query for."""

    print()
    print('Getting the first start date to query for.')
    print()
    print('The date must be greater than Jan 1st, 2018')
    year = int(input('Enter a value for the year: '))
    month = int(input('Enter a value for the month: '))
    day = int(input('Enter a value for the day: '))
    print()

    return datetime.datetime(year, month, day)

def preprocess_file(file_url):
    """Preprocesses the file by parsing it and sorting it by start date."""
    lines = requests.get(file_url).text.strip().split("\n")
    reader = csv.reader(lines[1:])

    # Create a dictionary to hold the employees by start date
    employees_by_start_date = {}

    for row in reader:
        start_date = datetime.datetime.strptime(row[3], "%Y-%m-%d")

        # Only consider employees that started on or after Jan 1st, 2018
        if start_date >= datetime.datetime(2018, 1, 1):
            if start_date not in employees_by_start_date:
                employees_by_start_date[start_date] = []

            employees_by_start_date[start_date].append("{} {}".format(row[0], row[1]))

    # Sort the employees by start date
    sorted_employees = sorted(employees_by_start_date.items())

    return sorted_employees

def get_same_or_newer(start_date, employees_by_start_date):
    """Returns the employees that started on the given date, or the closest one."""
    for date, employees in employees_by_start_date:
        if date >= start_date:
            return date, employees

    return None, []

def list_newer(start_date, employees_by_start_date):
    for date, employees in employees_by_start_date:
        if date < start_date:
            continue

        print("Started on {}: {}".format(date.strftime("%b %d, %Y"), employees))

def main():
    start_date = get_start_date()
    employees_by_start_date = preprocess_file(FILE_URL)

    # Find the employees for the given start date
    start_date, employees = get_same_or_newer(start_date, employees_by_start_date)
    print("Started on {}: {}".format(start_date.strftime("%b %d, %Y"), employees))

    # List the employees for all start dates after the given start date
    list_newer(start_date, employees_by_start_date)

if __name__ == "__main__":
    main()
